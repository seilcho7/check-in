{"version":3,"sources":["components/Post.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRef","webcam","_capture","imageSrc","getScreenshot","savePicture","setState","tempPicture","_date","timestamp","Date","now","date","toLocaleString","_saveDate","saveDate","_handleClose","show","_handleShow","state","_this2","interval","setInterval","clearInterval","_this3","url","concat","location","lat","lon","react_default","a","createElement","className","title","src","frameBorder","scrolling","marginHeight","marginWidth","href","react_webcam_default","audio","ref","value","inputValue","onChange","e","handleInput","target","variant","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","Modal_default","onHide","Header","closeButton","resetMood","Title","Body","alt","Footer","Button_default","submitLocation","React","Component","List","data","fetch","response","json","sortedData","sort","b","console","log","map","post","i","key","picture","mood","App","_geolocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","_submitLocation","method","headers","Content-Type","body","JSON","stringify","sent","_handleInput","_savePicture","_resetMood","react_router_dom","basename","to","react_router","exact","path","component","render","Post_Post","submitPicture","_submitPicture","List_List","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0489470c.chunk.js","sourcesContent":["import React from 'react';\nimport Webcam from \"react-webcam\";\nimport '../App.css';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nexport default class Post extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: '',\n            saveDate: '',\n            show: false,\n            tempPicture: ''\n        }\n    }\n    setRef = webcam => {\n        this.webcam = webcam;\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this._date();\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const url = `http://maps.google.com/maps?q=${this.props.location.lat}, ${this.props.location.lon}&z=15&output=embed`;\n        return (\n            <div className=\"card\">\n                <iframe className=\"card-img-top\" title=\"map\" src={url} frameBorder=\"0\" scrolling=\"no\" marginHeight=\"0\" marginWidth=\"0\"><a href=\"https://www.maps.ie/map-my-route/\">map</a></iframe>\n                <Webcam\n                    className=\"card-video-top\"\n                    audio={false}\n                    // height={360}\n                    ref={this.setRef}\n                    />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{this.state.date}</h5>\n                    <p className=\"card-text\"><input value={this.props.inputValue} onChange={(e) => {\n                        this.props.handleInput(e.target.value);\n                    }}\n                    /></p>\n                    <button variant=\"primary\" className=\"btn btn-primary\" onClick={async () => {\n                        await this._capture();\n                        this._handleShow();\n                        this._saveDate();\n                    }}>check!n</button>\n                </div>\n                <Modal show={this.state.show} onHide={this._handleClose}>\n                    <Modal.Header closeButton onClick={() => {\n                        this.props.resetMood();\n                    }}>\n                        <Modal.Title>post check!n?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <div className=\"card\">\n                        <iframe className=\"card-img-top\" title=\"map\" src={url} frameBorder=\"0\" scrolling=\"no\" marginHeight=\"0\" marginWidth=\"0\"><a href=\"https://www.maps.ie/map-my-route/\">map</a></iframe>\n                        <img src={this.state.tempPicture} className=\"card-img-top\" alt=\"...\"/>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{this.state.saveDate}</h5>\n                            <p className=\"card-text\">{this.props.inputValue}</p>\n                        </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={() => {\n                            this._handleClose();\n                            this.props.submitLocation();\n                            }}>\n                            post\n                        </Button>\n                        <Button variant=\"secondary\" onClick={() => {\n                            this._handleClose();\n                            this.props.resetMood();\n                            }}>\n                            cancel\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        )\n    }\n    \n    _capture = () => {\n        const imageSrc = this.webcam.getScreenshot();\n        this.props.savePicture(imageSrc);\n        this.setState({\n            tempPicture: imageSrc\n        })\n    };\n\n    _date = () => {\n        const timestamp = Date.now();\n        const date = new Date(timestamp).toLocaleString();\n        this.setState({\n            date\n        })\n    }\n\n    _saveDate = () => {\n        const timestamp = Date.now();\n        const saveDate = new Date(timestamp).toLocaleString();\n        this.setState({\n            saveDate\n        })\n    }\n\n    _handleClose = () => {\n        this.setState({\n            show: false\n        })\n    }\n\n    _handleShow = () => {\n        this.setState({\n            show: true\n        })\n    }\n\n}","import React from 'react';\nimport '../App.css';\n\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n\n    async componentDidMount() {\n        const response = await fetch('http://localhost:3001/api');\n        const data = await response.json();\n        const sortedData = data.sort(function(a, b) {\n            return b.timestamp - a.timestamp;\n        })\n        this.setState({\n            data: sortedData\n        })\n        console.log(this.state.data);\n    }\n\n    render() {\n        \n        return (\n            <div>\n                {this.state.data.map((post, i) => {\n                    const date = new Date(post.timestamp).toLocaleString();\n                    const url = `http://maps.google.com/maps?q=${post.location.lat}, ${post.location.lon}&z=15&output=embed`;\n                return (\n                    <div key={i} className=\"card\">\n                        <iframe className=\"card-img-top\" title=\"map\" src={url} frameBorder=\"0\" scrolling=\"no\" marginHeight=\"0\" marginWidth=\"0\"><a href=\"https://www.maps.ie/map-my-route/\">map</a></iframe>\n                        <img src={post.picture} className=\"card-img-top\" alt=\"...\"/>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{date}</h5>\n                            <p className=\"card-text\">{post.mood}</p>\n                            {/* <button onClick={this._delete} className=\"btn btn-primary\">delete</button> */}\n                        </div>\n                    </div>\n                )\n                })}\n            </div>\n        )\n\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Link, HashRouter, Route } from 'react-router-dom'\nimport Post from './components/Post';\nimport List from './components/List';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: {},\n      mood: '',\n      picture: ''\n    }\n  }\n\n  componentDidMount() {\n    this._geolocation();\n  }\n\n  render() {\n    return (\n      <div>\n        <HashRouter basename='/'>\n          <div className=\"title\">\n            <h2>check!n</h2>\n          </div>\n          <ul className=\"nav justify-content-center\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/post\">Post</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/list\">List</Link>\n            </li>\n          </ul>\n          <Route exact path='/' component={List}/>\n          <Route path='/post'\n            render={() => (\n              <div>\n                <Post\n                        location={this.state.location}\n                        inputValue={this.state.mood}\n                        handleInput={this._handleInput} \n                        submitLocation={this.state.location !== {} ? this._submitLocation : null}\n                        submitPicture={this._submitPicture}\n                        savePicture={this._savePicture}\n                        resetMood={this._resetMood}\n                        />\n              </div>\n            )} />\n          <Route path='/list'\n            render={() => (\n              <div>\n                <List data={this.state.data}/>\n              </div>\n            )} />\n        </HashRouter>\n      </div>\n    );\n  }\n\n  // Get geolocation\n  _geolocation = () => {\n    if ('geolocation' in navigator) {\n      console.log('geolocation available');\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          location: {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          }\n        });\n      });\n    } else {\n      console.log('geolocation not available');\n    }\n  }\n\n  // Save data to nedb when submit button is clicked\n  _submitLocation = async () => {\n    const response = await fetch('http://localhost:3001/api', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            location: this.state.location,\n            mood: this.state.mood,\n            picture: this.state.picture\n          })\n        });\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      mood: '',\n      picture: ''\n    });\n  }\n\n  _handleInput = (mood) => {\n    this.setState({\n      mood\n    })\n  }\n\n  _savePicture = (picture) => {\n    this.setState({\n      picture\n    })\n  }\n\n  _resetMood = () => {\n    this.setState({\n      mood: ''\n    })\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}